worker_processes  4;

error_log  logs/error.log  error;

events {
    worker_connections  1024;
}

http {
    server_tokens off;
    charset UTF-8;
    include ./mime.types;

    log_format  main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    lua_package_path '$prefix/?.lua;/usr/local/lor/?.lua;;';
    lua_code_cache on;

    lua_shared_dict idholder 1m;
    lua_shared_dict clients 10m;
    lua_shared_dict dispatch_workers 1m;

    # msg queue for every worker. 
    # the number of shared dict should be equal to nginx worker count
    lua_shared_dict msg_queue_0 10m;
    lua_shared_dict msg_queue_1 10m;
    lua_shared_dict msg_queue_2 10m;
    lua_shared_dict msg_queue_3 10m;

    init_by_lua_block {
        litchi = require("litchi.litchi")
        litchi.init()
    }

    init_worker_by_lua_block {
        litchi.init_worker()
    }

    server {
        listen 80;
        access_log off;
        
        location / {
            content_by_lua_block {
                ngx.say([[hello! this is Litchi.]])
            }
        }
    }

    # websocket server
    server {
        listen       10000;
        access_log ./logs/websocket_access.log main;
        error_log ./logs/websocket_error.log info;


        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }

        # 静态文件
        location ~* /static/(.*) {
            alias ./litchi/static/$1;
        }

        location = /endpoint {
            lua_socket_log_errors on;
            content_by_lua_block {
                local endpoint = require("litchi.endpoint")
                endpoint.start_client(context, dispather)
            }
        }

        ######################################## mock start ########################################

        location /mock_msg {
            content_by_lua_block {
                local cjson = require("cjson")
                local query =  ngx.req.get_uri_args()
                local to_worker = query["to_worker"]
                local msg = tostring(query["msg"])

                
                local i = 0
                local worker_count = ngx.worker.count()
                while (i < worker_count) do
                    local queue = ngx.shared["msg_queue_" .. i]
                    local count, err = queue:lpush("msg", msg)
                    if err then
                        ngx.log(ngx.ERR, [[lpush error occurs:]], err, [[ type of value:]], type(msg))
                    end
                    ngx.log(ngx.INFO, [[after lpush, msg_queue_length is:]], count)
                    i = i + 1
                end

                local dws = litchi.context.dispatch_workers
                for worker_id, dw in pairs(dws) do
                    ngx.log(ngx.INFO, [[notify dispatch_worker ]], worker_id)
                    dw:notify()
                end

                ngx.say("ok")
            }
        }

        location /queue_stat {
            content_by_lua_block {
                local i = 0
                local worker_count = ngx.worker.count()
                while (i < worker_count) do
                    local queue = ngx.shared["msg_queue_" .. i]
                    i = i + 1
                    ngx.say(queue:llen("msg"))
                end
            }
        }

        location /workers {
            content_by_lua_block {
                local dispatch_workers = ngx.shared.dispatch_workers
                local worker_ids = dispatch_workers:get_keys()
                ngx.say(type(worker_ids) .. " " .. (#worker_ids))
                for i, worker_id in pairs(worker_ids) do
                    ngx.say(i .. ":" .. worker_id)
                end
            }
        }

        location / {
            set $template_root '';
            content_by_lua_file litchi/mock.lua;
        }

        ######################################### mock end #########################################

    }
}
