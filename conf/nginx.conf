worker_processes  2;

error_log  logs/error.log  error;

events {
    worker_connections  1024;
}

http {
    server_tokens off;
    charset UTF-8;
    include ./mime.types;

    log_format  main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    lua_package_path '$prefix/?.lua;/usr/local/lor/?.lua;;';
    lua_code_cache on;

    lua_shared_dict clients 10m;

    init_by_lua_block {
        local context = {
            clients = {}, -- cid --> client
            groups = {},
            users = {}
        }
        endpoint = require("litchi.endpoint")
        endpoint.init(context)
    }

    server {
        listen 80;
        access_log off;
        
        location / {
            content_by_lua_block {
                ngx.say([[hello! this is Litchi.]])
            }
        }
    }

    # websocket server
    server {
        listen       10000;
        access_log ./logs/websocket_access.log main;
        error_log ./logs/websocket_error.log info;




        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }

        # 静态文件
        location ~* /litchi/static/(.*) {
            alias ./litchi/static/$1;
        }

        location = /endpoint {
            content_by_lua_block {
                endpoint.start_client()
            }
        }

        location / {
            set $template_root '';
            content_by_lua_file litchi/demo.lua;
        }
    }

}
